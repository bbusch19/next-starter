version: 0.2

env:
  variables:
    NODE_ENV: 'production'

phases:
  install:
    commands:
      - echo Logging in to Amazon ECR...
      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
  build:
    commands:
      - echo Build started on `date`
      - echo Building the Docker image...
      - docker build --build-arg="CUSTOM_NODE_IMAGE=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/node:18-alpine" -t $IMAGE_REPO_NAME:$IMAGE_TAG .
      - docker tag $IMAGE_REPO_NAME:$IMAGE_TAG $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG
  post_build:
    commands:
      - echo Build completed on `date`
      - echo Pushing the Docker image...
      - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG
      - printf '{"ImageURI":"%s"}' $IMAGE_REPO_NAME:$IMAGE_TAG > imageDetail.json
      - printf "this is my var: %s" $TASK_ARN
      # - printf "version: 0.0" > appspec.yaml
      # - printf 'Resources:' >> appspec.yaml
      # - printf '\t-\sTargetService:' >> appspec.yaml
      # - printf '\t\t\tType:\sAWS::ECS::Service' >> appspec.yaml
      # - printf '\t\t\tProperties:' >> appspec.yaml
      # - printf '\t\t\t\tTaskDefinition:/s%s' $TASK_ARN >> appspec.yaml
      # - printf '\t\t\t\tLoadBalancerInfo:' >> appspec.yaml
      # - printf '\t\t\t\t\tContainerName:\s%s' $CONTAINER_NAME >> appspec.yaml
      # - printf '\t\t\t\t\tContainerPort:\s3000' >> appspec.yaml
artifacts:
  files:
    - imageDetail.json
    - appspec.yaml
    - taskdef.json
