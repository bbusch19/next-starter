AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  ImageRepositoryName:
    Type: String
    Default: my-ecr-repo
    Description: Name of the Amazon ECR repository
  S3Bucket:
    Type: String
    Default: my-bucket
    Description: Pipeline bucket
  S3BucketName:
    Type: String
    Default: my-bucket-name
    Description: Pipeline bucket name
  GitHubRepoOwner:
    Type: String
    Description: GitHub repository owner
  GitHubRepoName:
    Type: String
    Description: GitHub repository name
  GitHubBranch:
    Type: String
    Default: main
    Description: GitHub branch to trigger the pipeline

Resources:
  MyECRRepository:
    Type: 'AWS::ECR::Repository'
    Properties:
      RepositoryName: !Ref ImageRepositoryName

  MySeedCodePipeline:
    Type: 'AWS::CodePipeline::Pipeline'
    Properties:
      Name: MySeedCodePipeline
      RoleArn: !GetAtt MyCodePipelineRole.Arn
      ArtifactStore:
        Location: !Ref S3Bucket
        Type: S3
      Stages:
        Stages:
          - Name: Source
            Actions:
              - Name: SourceAction
                ActionTypeId:
                  Category: Source
                  Owner: ThirdParty
                  Provider: GitHub
                  Version: 1
                OutputArtifacts:
                  - Name: SourceOutput
                Configuration:
                  Owner: !Ref GitHubRepoOwner
                  Repo: !Ref GitHubRepoName
                  Branch: !Ref GitHubBranch
                  OAuthToken: '{{resolve:secretsmanager:/test/github:SecretString:GitHubToken}}'

          - Name: Build
            Actions:
              - Name: BuildAction
                ActionTypeId:
                  Category: Build
                  Owner: AWS
                  Provider: CodeBuild
                  Version: 1
                InputArtifacts: []
                OutputArtifacts:
                  - Name: BuildOutput
                Configuration:
                  ProjectName: !Ref MySeedCodeBuildProject

  MySeedCodeBuildProject:
    Type: 'AWS::CodeBuild::Project'
    Properties:
      Name: MySeedCodeBuildProject
      Description: My CodeBuild Project
      ServiceRole: !GetAtt MyCodeBuildRole.Arn
      Source:
        Type: CODEPIPELINE
        BuildSpec: !Sub |
          version: 0.2
          env:
            variables:
              AWS_DEFAULT_REGION: "us-east-1"
              AWS_ACCOUNT_ID: 292770788088
              IMAGE_TAG: latest
              IMAGE_REPO_NAME: ${ImageRepositoryName}
          phases:
            install:
              commands:
                - echo Logging in to Amazon ECR...
                - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
            build:
              commands:
                - echo Build started on `date`
                - echo Building the Docker image...
                - docker build -f Dockerfile.seed --build-arg="CUSTOM_NODE_IMAGE=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/node:18-alpine" -t $IMAGE_REPO_NAME:$IMAGE_TAG .
                - docker tag $IMAGE_REPO_NAME:$IMAGE_TAG $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG
            post_build:
              commands:
                - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG
      Environment:
        Type: ARM_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-aarch64-standard:3.0
        PrivilegedMode: true
      Artifacts:
        Type: CODEPIPELINE
      Cache:
        Type: S3
        Location: !Sub '${S3BucketName}/codebuild-cache'

  #Roles
  MyCodeBuildRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: MyCodeBuildRolePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:GetBucketAcl
                Resource: !Sub 'arn:aws:s3:::${S3Bucket}/*'
              - Effect: Allow
                Action:
                  - ecr:BatchCheckLayerAvailability
                  - ecr:CompleteLayerUpload
                  - ecr:GetAuthorizationToken
                  - ecr:InitiateLayerUpload
                  - ecr:PutImage
                  - ecr:UploadLayerPart
                  - ecr:BatchGetImage
                  - ecr:GetDownloadUrlForLayer
                Resource: '*'

  MyCodePipelineRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: MyCodePipelineRolePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:GetBucketVersioning
                  - s3:GetBucketAcl
                Resource: !Sub 'arn:aws:s3:::${S3Bucket}/*'
              - Effect: Allow
                Action:
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuilds
                  - codebuild:BatchGetBuildBatches
                  - codebuild:StartBuildBatch
                Resource: '*'
              - Effect: Allow
                Action:
                  - codedeploy:CreateDeployment
                  - codedeploy:GetApplication
                  - codedeploy:GetApplicationRevision
                  - codedeploy:GetDeployment
                  - codedeploy:GetDeploymentConfig
                  - codedeploy:RegisterApplicationRevision
                Resource: '*'

Outputs:
  MyCodeBuildRoleArn:
    Value: !GetAtt MyCodeBuildRole.Arn
    Export:
      Name: MyCodeBuildRoleArn
  MyCodePipelineRoleArn:
    Value: !GetAtt MyCodePipelineRole.Arn
    Export:
      Name: MyCodePipelineRoleArn
